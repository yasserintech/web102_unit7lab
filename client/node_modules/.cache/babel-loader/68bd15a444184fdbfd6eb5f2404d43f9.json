{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageApiError, StorageUnknownError } from './errors';\nimport { resolveResponse } from './helpers';\n\nconst _getErrorMessage = err => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\n\nconst handleError = (error, reject, options) => __awaiter(void 0, void 0, void 0, function* () {\n  const Res = yield resolveResponse();\n\n  if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {\n    error.json().then(err => {\n      reject(new StorageApiError(_getErrorMessage(err), error.status || 500));\n    }).catch(err => {\n      reject(new StorageUnknownError(_getErrorMessage(err), err));\n    });\n  } else {\n    reject(new StorageUnknownError(_getErrorMessage(error), error));\n  }\n});\n\nconst _getRequestParams = (method, options, parameters, body) => {\n  const params = {\n    method,\n    headers: (options === null || options === void 0 ? void 0 : options.headers) || {}\n  };\n\n  if (method === 'GET') {\n    return params;\n  }\n\n  params.headers = Object.assign({\n    'Content-Type': 'application/json'\n  }, options === null || options === void 0 ? void 0 : options.headers);\n\n  if (body) {\n    params.body = JSON.stringify(body);\n  }\n\n  return Object.assign(Object.assign({}, params), parameters);\n};\n\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      fetcher(url, _getRequestParams(method, options, parameters, body)).then(result => {\n        if (!result.ok) throw result;\n        if (options === null || options === void 0 ? void 0 : options.noResolveJson) return result;\n        return result.json();\n      }).then(data => resolve(data)).catch(error => handleError(error, reject, options));\n    });\n  });\n}\n\nexport function get(fetcher, url, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'GET', url, options, parameters);\n  });\n}\nexport function post(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n  });\n}\nexport function put(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n  });\n}\nexport function head(fetcher, url, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'HEAD', url, Object.assign(Object.assign({}, options), {\n      noResolveJson: true\n    }), parameters);\n  });\n}\nexport function remove(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n  });\n}","map":{"version":3,"mappings":"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","names":["StorageApiError","StorageUnknownError","resolveResponse","_getErrorMessage","err","msg","message","error_description","error","JSON","stringify","handleError","reject","options","__awaiter","Res","noResolveJson","json","then","status","catch","_getRequestParams","method","parameters","body","params","headers","Object","_handleRequest","fetcher","url","Promise","resolve","result","ok","data","get","post","put","head","remove"],"sources":["/Users/grove/Desktop/repos/web102_unit7lab/client/node_modules/@supabase/storage-js/src/lib/fetch.ts"],"sourcesContent":["import { StorageApiError, StorageUnknownError } from './errors'\nimport { resolveResponse } from './helpers'\nimport { FetchParameters } from './types'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = async (\n  error: unknown,\n  reject: (reason?: any) => void,\n  options?: FetchOptions\n) => {\n  const Res = await resolveResponse()\n\n  if (error instanceof Res && !options?.noResolveJson) {\n    error\n      .json()\n      .then((err) => {\n        reject(new StorageApiError(_getErrorMessage(err), error.status || 500))\n      })\n      .catch((err) => {\n        reject(new StorageUnknownError(_getErrorMessage(err), err))\n      })\n  } else {\n    reject(new StorageUnknownError(_getErrorMessage(error), error))\n  }\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json', ...options?.headers }\n\n  if (body) {\n    params.body = JSON.stringify(body)\n  }\n  return { ...params, ...parameters }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, parameters, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return result\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject, options))\n  })\n}\n\nexport async function get(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\n}\n\nexport async function head(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(\n    fetcher,\n    'HEAD',\n    url,\n    {\n      ...options,\n      noResolveJson: true,\n    },\n    parameters\n  )\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\n}\n"]},"metadata":{},"sourceType":"module"}